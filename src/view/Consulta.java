/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package view;

import arquivos.ReadFile;
import java.awt.event.ActionEvent;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class Consulta extends javax.swing.JFrame {

    /**
     * Creates new form agendamento
     */
    public Consulta() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        label = new javax.swing.JLabel();
        btConsulta = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableExibe = new javax.swing.JTable();
        labelMostra = new javax.swing.JLabel();
        txtBusca = new javax.swing.JTextField();
        labelBusca = new javax.swing.JLabel();
        btVoltar = new javax.swing.JButton();
        cbFiltro = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Consulta de clientes");
        setResizable(false);

        label.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        label.setText("CONSULTA DE CLIENTES");

        btConsulta.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        btConsulta.setText("Consultar");
        btConsulta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btConsultaActionPerformed(evt);
            }
        });

        tableExibe.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CodCliente", "Nome", "Telefone", "CPF", "Logradouro", "Nº", "Complemento", "Bairro", "CEP"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableExibe);

        txtBusca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBuscaActionPerformed(evt);
            }
        });

        labelBusca.setText("Buscar:");

        btVoltar.setText("Voltar");
        btVoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btVoltarActionPerformed(evt);
            }
        });

        cbFiltro.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "<Geral>", "CodCliente", "Nome", "Telefone", "CPF", "Logradouro", "Nº ", "Complemento", "Bairro", "CEP" }));
        cbFiltro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbFiltroActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelMostra, javax.swing.GroupLayout.PREFERRED_SIZE, 696, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 940, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(211, 211, 211)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(146, 146, 146)
                        .addComponent(label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(361, 361, 361))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(labelBusca)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtBusca, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(42, 42, 42)
                        .addComponent(cbFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(269, 269, 269))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btConsulta, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(188, 188, 188)
                        .addComponent(btVoltar)
                        .addGap(208, 208, 208))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(label, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtBusca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelBusca)
                    .addComponent(cbFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(labelMostra, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btConsulta, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btVoltar))
                .addGap(25, 25, 25))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void txtBuscaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBuscaActionPerformed
        btConsultaActionPerformed(evt);
    }//GEN-LAST:event_txtBuscaActionPerformed

    private void btVoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btVoltarActionPerformed
        Central central = new Central();
        central.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btVoltarActionPerformed

    private void btConsultaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btConsultaActionPerformed

        try {
            //ele abre o arquivo
            //cria um vetor de cada as linhas
            //e le quantas linhas tem no arquivo ignorando linhas vazias
            ReadFile x = new ReadFile();
            String vet[] = x.leArquivo("cliente.txt");
            int taman = x.leTamanho("cliente.txt");
            
            DefaultTableModel model = (DefaultTableModel) tableExibe.getModel();
            model.setNumRows(0);
            
            //se a area de busca estiver com algum texto
            //se não ele exibe todos
            if (!"".equals(txtBusca.getText())) {
                
                //se o filtro estiver em <geral>
                //então ele busca oq tiver no campo de busca
                //se não for nada encontrado ele exibe uma mensagem
                if (cbFiltro.getSelectedItem().equals("<Geral>")) {
                    int l = x.buscaLinha(vet, txtBusca.getText());
                    
                    //se o metodo não encontrar ele retorna o número -1
                    if (l >= 0) {
                        //ele percorre todo o arquivo e se achar a busca que ta procurando
                        //o vetor é quebrado e add a linha da tabela por meio do addRow
                        //e a linha do vetor é declarado como vazio para evitar de achar sempre o mesmo
                        for (int i = 0; i < taman; i++) {
                            int li;
                            li = x.buscaLinha(vet, txtBusca.getText());
                            if (li >= 0) {
                                model.addRow(x.quebra(vet[li]));
                                vet[li] = "";
                            }
                        }

                    } else {
                        JOptionPane.showMessageDialog(null, "busca por " + txtBusca.getText() + " não encontrado");
                    }
                //ele verifica em cada else if qual foi a opção escolhida
                //assim ele cria um vetor com a opção de filtro desejado
                //então ele busca nesse vetor todos os dados que condizem com a busca e exibem na tabela
                } else if (cbFiltro.getSelectedItem().equals("CodCliente")) {
                    String vetUnico[] = x.VerificaCod(vet, "cliente.txt", 0);
                    
                    for (int i = 0; i < taman; i++) {
                            int posicao;
                            posicao = x.buscaLinha(vetUnico, txtBusca.getText());
                            if (posicao >= 0) {
                                model.addRow(x.quebra(vet[posicao]));
                                vet[posicao] = "";
                                vetUnico[posicao] = "";
                                                         
                            }}
                }else if (cbFiltro.getSelectedItem().equals("Nome")) {
                    String vetUnico[] = x.VerificaCod(vet, "cliente.txt", 1);
                    
                    for (int i = 0; i < taman; i++) {
                            int posicao;
                            posicao = x.buscaLinha(vetUnico, txtBusca.getText());
                            if (posicao >= 0) {
                                model.addRow(x.quebra(vet[posicao]));
                                vet[posicao] = "";
                                vetUnico[posicao] = "";
                                                         
                            }}
                }else if (cbFiltro.getSelectedItem().equals("Telefone")) {
                    String vetUnico[] = x.VerificaCod(vet, "cliente.txt", 2);
                    
                    for (int i = 0; i < taman; i++) {
                            int posicao;
                            posicao = x.buscaLinha(vetUnico, txtBusca.getText());
                            if (posicao >= 0) {
                                model.addRow(x.quebra(vet[posicao]));
                                vet[posicao] = "";
                                vetUnico[posicao] = "";
                                                         
                            }}
                }else if (cbFiltro.getSelectedItem().equals("CPF")) {
                    String vetUnico[] = x.VerificaCod(vet, "cliente.txt", 3);
                    
                    for (int i = 0; i < taman; i++) {
                            int posicao;
                            posicao = x.buscaLinha(vetUnico, txtBusca.getText());
                            if (posicao >= 0) {
                                model.addRow(x.quebra(vet[posicao]));
                                vet[posicao] = "";
                                vetUnico[posicao] = "";
                                                         
                            }}
                }else if (cbFiltro.getSelectedItem().equals("Logradouro")) {
                    String vetUnico[] = x.VerificaCod(vet, "cliente.txt", 4);
                    
                    for (int i = 0; i < taman; i++) {
                            int posicao;
                            posicao = x.buscaLinha(vetUnico, txtBusca.getText());
                            if (posicao >= 0) {
                                model.addRow(x.quebra(vet[posicao]));
                                vet[posicao] = "";
                                vetUnico[posicao] = "";
                                                         
                            }}
                }else if (cbFiltro.getSelectedItem().equals("Nº")) {
                    String vetUnico[] = x.VerificaCod(vet, "cliente.txt", 5);
                    
                    for (int i = 0; i < taman; i++) {
                            int posicao;
                            posicao = x.buscaLinha(vetUnico, txtBusca.getText());
                            if (posicao >= 0) {
                                model.addRow(x.quebra(vet[posicao]));
                                vet[posicao] = "";
                                vetUnico[posicao] = "";
                                                         
                            }}
                }else if (cbFiltro.getSelectedItem().equals("Complemento")) {
                    String vetUnico[] = x.VerificaCod(vet, "cliente.txt", 6);
                    
                    for (int i = 0; i < taman; i++) {
                            int posicao;
                            posicao = x.buscaLinha(vetUnico, txtBusca.getText());
                            if (posicao >= 0) {
                                model.addRow(x.quebra(vet[posicao]));
                                vet[posicao] = "";
                                vetUnico[posicao] = "";
                                                         
                            }}
                }else if (cbFiltro.getSelectedItem().equals("Bairro")) {
                    String vetUnico[] = x.VerificaCod(vet, "cliente.txt", 7);
                    
                    for (int i = 0; i < taman; i++) {
                            int posicao;
                            posicao = x.buscaLinha(vetUnico, txtBusca.getText());
                            if (posicao >= 0) {
                                model.addRow(x.quebra(vet[posicao]));
                                vet[posicao] = "";
                                vetUnico[posicao] = "";
                                                         
                            }}
                }else if (cbFiltro.getSelectedItem().equals("CEP")) {
                    String vetUnico[] = x.VerificaCod(vet, "cliente.txt", 8);
                    
                    for (int i = 0; i < taman; i++) {
                            int posicao;
                            posicao = x.buscaLinha(vetUnico, txtBusca.getText());
                            if (posicao >= 0) {
                                model.addRow(x.quebra(vet[posicao]));
                                vet[posicao] = "";
                                vetUnico[posicao] = "";
                                                         
                            }}
                }
            } else {
                //se o campo de busca estiver vazio ele mostra todos os clientes cadastrados
                for (int i = 0; i < taman; i++) {
                    if (!"".equals(vet[i])) {
                        model.addRow(x.quebra(vet[i]));
                    }
                }

            }

        } catch (Exception ex) {
            Logger.getLogger(Consulta.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btConsultaActionPerformed

    private void cbFiltroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbFiltroActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbFiltroActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Consulta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Consulta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Consulta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Consulta.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Consulta().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btConsulta;
    private javax.swing.JButton btVoltar;
    private javax.swing.JComboBox<String> cbFiltro;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel label;
    private javax.swing.JLabel labelBusca;
    private javax.swing.JLabel labelMostra;
    private javax.swing.JTable tableExibe;
    private javax.swing.JTextField txtBusca;
    // End of variables declaration//GEN-END:variables

    private void jButton1ActionPerformed(ActionEvent evt) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
}
